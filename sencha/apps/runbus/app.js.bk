//<debug>
Ext.Loader.setPath({
    'Ext': '../../src'
});
//</debug>

/**
 * This simple example shows the ability of the Ext.List component.
 *
 * In this example, it uses a grouped store to show group headers in the list. It also
 * includes an indicator so you can quickly swipe through each of the groups. On top of that
 * it has a disclosure button so you can disclose more information for a list item.
 */

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! MODEL

Ext.define('TestModel', {
    extend: 'Ext.data.Model',
    config: {
        fields: [{
            name: 'val1'
        }, {
            name: 'val2'
        }]
    }
});

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! STORE

Ext.define('TestStore', {
    extend: 'Ext.data.Store',
    config: {
        data: [{
            val1: 'A Button',
            val2: 'with text'
        }, {
            val1: 'The Button',
            val2: 'more text'
        }, {
            val1: 'My Button',
            val2: 'My Text'
        }],
        model: 'TestModel',
        storeId: 'TestStore'
    }
});

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DATA ITEM

Ext.define('MyDataItem', {
    extend: 'Ext.dataview.component.DataItem',
    alias: 'widget.mydataitem',
    config: {
        padding: 10,
        layout: {
            type: 'hbox'
        },
        defaults: {
            margin: 5
        },
        items: [{
            xtype: 'button',
            text: 'Val1'
        }, {
            xtype: 'component',
            flex: 1,
            html: 'val2',
            itemId: 'textCmp'
        }]
    },
    updateRecord: function(record) {
        var me = this;

        me.down('button').setText(record.get('val1'));
        me.down('#textCmp').setHtml(record.get('val2'));

        me.callParent(arguments);
    }
});

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! DATA VIEW

Ext.define('MyDataView', {
    extend: 'Ext.dataview.DataView',
    config: {
        defaultType: 'mydataitem',
        useComponents: true
    }
});


//define the application
Ext.application({
    //define the startupscreens for tablet and phone, as well as the icon
    startupImage: {
        '320x460': 'resources/startup/Default.jpg', // Non-retina iPhone, iPod touch, and all Android devices
        '640x920': 'resources/startup/640x920.png', // Retina iPhone and iPod touch
    },

    isIconPrecomposed: false,
    icon: {
        57: 'resources/icons/icon.png',
        72: 'resources/icons/icon@72.png',
    },

    //require any components/classes what we will use in our example
    requires: [
        'Ext.MessageBox',
        'Ext.data.Store',
        'Ext.List',
        'Ext.plugin.PullRefresh'
    ],

    /**
     * The launch method is called when the browser is ready, and the application can launch.
     *
     * Inside our launch method we create the list and show in in the viewport. We get the lists configuration
     * using the getListConfiguration method which we defined below.
     *
     * If the user is not on a phone, we wrap the list inside a panel which is centered on the page.
     */
    launch: function() {
        //get the configuration for the list
        var listConfiguration = this.getListConfiguration();

        //if the device is not a phone, we want to create a centered panel and put the list
        //into that
        if (!Ext.os.is.Phone) {
            //if we are a phone, simply add the list as an item to the viewport
            var touchTeam = Ext.create('Ext.DataView', {
            fullscreen: true,

            store: {
                fields: ['name', 'age'],
                data: [
                    {name: 'Greg',  age: 100},
                    {name: 'Brandon',   age: 21},
                    {name: 'Scott',   age: 21},
                    {name: 'Gary', age: 24},
                    {name: 'Fred', age: 24},
                    {name: 'Seth',   age: 26},
                    {name: 'Kevin',   age: 26},
                    {name: 'Israel',   age: 26},
                    {name: 'Mitch', age: 26}
                ]
            },

            itemTpl: '{name} is {age} years old'
        });
        } else {
            //if we are a phone, simply add the list as an item to the viewport
            //Ext.Viewport.add(listConfiguration);
            Ext.create('MyDataView', {
                    fullscreen: true,
                    store: Ext.create('TestStore')
            });

        }
    },

    /**
     * Returns a configuration object to be used when adding the list to the viewport.
     */
    getListConfiguration: function() {
        //create a store instance
        var store = Ext.create('Ext.data.Store', {
            //give the store some fields
            fields: ['firstName', 'lastName'],

            //filter the data using the firstName field
            sorters: 'firstName',

            //autoload the data from the server
            //autoLoad: true,

            //setup the grouping functionality to group by the first letter of the firstName field
            grouper: {
                groupFn: function(record) {
                    return record.get('firstName')[0];
                }
            },
            data: [
                { firstName: 'Greg',    lastName: 'Barry' },
                { firstName: 'Seth', lastName: 'Lemmons' },
                { firstName: 'Mitch', lastName: 'Simoens' },
                { firstName: 'Fred', lastName: 'Mosby' }
            ],
            //setup the proxy for the store to use an ajax proxy and give it a url to load
            //the local contacts.json file
            /*
            proxy: {
                type: 'ajax',
                url: 'http://121.43.234.157:5050/contacts.json'
            }
            */
        });

        return {
            //give it an xtype of list for the list component
            xtype: 'list',

            id: 'list',

//            scrollable: {
//                indicators: false
//            },

            //set the itemtpl to show the fields for the store
            itemTpl: '{firstName} {lastName}',

            //enable disclosure icons
            //disclosure: true,

            //group the list
            grouped: true,

            //enable the indexBar
            indexBar: true,

            infinite: true,

            useSimpleItems: true,

            variableHeights: true,

            striped: true,

            ui: 'round',

            //set the function when a user taps on a disclsoure icon
            // onItemDisclosure: function(record, item, index, e) {
            //     //show a messagebox alert which shows the persons firstName
            //     e.stopEvent();
            //     Ext.Msg.alert('Disclose', 'Disclose more info for ' + record.get('firstName'));
            // },

            //bind the store to this list
            store: store
        };
    }
});
